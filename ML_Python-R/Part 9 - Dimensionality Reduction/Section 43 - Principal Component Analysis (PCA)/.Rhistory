setwd("C:/Users/nickm/PythonProjects/ML_Python-R/Part 4 - Clustering/Section 25 - Hierarchical Clustering")
dataset <- read.csv('Mall_Customers.csv')
x <- dataset[4:5]
dendrogram <- hclust(dist(x, method = 'euclidean'), method = 'ward.D')
plot(dendrogram,
main = paste('Dendrogram'),
xlab = 'Customers',
ylab = 'Euclidean distances')
#Fitting hiearchcical clustering to mall dataset
hc <- hclust(dist(x, method = 'euclidian'), method = 'Ward.D')
#Fitting hiearchcical clustering to mall dataset
hc <- hclust(dist(x, method = 'euclidian'), method = 'ward.D')
y_hc <- cutree(hc, 5)
y_hc
library(cluster)
clusplot(x,
y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
hc2 <- hclust(dist(x, method = 'euclidian'), method = 'ward.D')
y_hc2 <- cutree(hc, 5)
clusplot(x,
y_hc2,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
clusplot(x,
y_hc2,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
y_hc2 <- cutree(hc, 6)
clusplot2(x,
y_hc2,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
clusplot(x,
y_hc2,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
View(y_hc)
setwd("C:/Users/nickm/PythonProjects/ML_Python-R/Part 9 - Dimensionality Reduction/Section 43 - Principal Component Analysis (PCA)")
dataset <- read.csv(Wine.csv)
dataset <- read.csv('Wine.csv')
View(dataset)
#Splitting dataset
library(caTools)
#Splitting dataset
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
#Feature Scaling
training_set[-14] <- scale(training_set[-14])
View(training_set)
#Feature Scaling
training_set[-14] = scale(training_set[-14])
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(caret)
install.packages('e1071')
library(e1071)
pca <- preProcess(training_set[-14], method = 'pca', pcaComp = 2)
pca_training_set <- predict(pca, training_set)
pca_training_set <- pca_training_set[c(2, 3, 1)]
pca_test_set <- predict(pca, test_set)
View(pca_test_set)
pca_test_set <- pca_test_set[c(2, 3, 1)]
View(pca_test_set)
#Fitting SVM to model
classifier = svm(formula = Customer_Segment ~ .,
data = pca_training_set,
type = 'C-classification',
kernel = 'linear')
y_pred <- predict(classifier, newdata = test_set[-3])
y_pred <- predict(classifier, newdata = test_set[-3])
classifier <- svm(formula = Customer_Segment ~ .,
data = pca_training_set,
type = 'C-classification',
kernel = 'linear')
y_pred <- predict(classifier, newdata = test_set[-3])
classifier = svm(formula = Customer_Segment ~ .,
data = pca_training_set,
type = 'C-classification',
kernel = 'linear')
y_pred <- predict(classifier, newdata = test_set[-3])
View(pca_training_set)
library(e1071)
pca <- preProcess(training_set[-14], method = 'pca', pcaComp = 2)
pca_training_set <- predict(pca, training_set)
pca_training_set <- pca_training_set[c(2, 3, 1)]
pca_test_set <- predict(pca, test_set)
pca_test_set <- pca_test_set[c(2, 3, 1)]
classifier = svm(formula = Customer_Segment ~ .,
data = pca_training_set,
type = 'C-classification',
kernel = 'linear')
View(classifier)
y_pred <- predict(classifier, newdata = test_set[-3])
y_pred <- predict(classifier, newdata = pca_test_set[-3])
#Confusion Matrix
cm = table(pca_test_set[, 3], y_pred)
View(cm)
y_pred
cm
#Visualizing Training Set
library(ElemStatLearn)
#Visualizing Training Set
install.packages('ElemStatLearn')
library(ElemStatLearn)
